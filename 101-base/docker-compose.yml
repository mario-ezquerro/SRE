volumes:
  consul_data:

networks:
  observability-net:
    driver: bridge



# Define los límiteGs de recursos una sola vez
x-resources: &resources
  deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 250M




services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./prometheus/:/etc/prometheus/
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    <<: *resources  # Reutiliza los límites de recursos
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s     
    networks:
      - observability-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=password
#     - GF_AUTH_LDAP_ENABLED=true
#     - GF_AUTH_LDAP_CONFIG_FILE=/etc/grafana/provisioning/ldap.toml
    ports:
      - "3000:3000"
    networks:
      - observability-net
    <<: *resources  # Reutiliza los límites de recursos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      - prometheus
      - loki
      - promtail


  loki:
    image: grafana/loki:latest
    container_name: loki
    hostname: loki
    restart: unless-stopped
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yml
    # command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    <<: *resources  # Reutiliza los límites de recursos        
    healthcheck:
      #test: ["CMD", "curl", "-f", "http://localhost:3100/ready"]
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s    
    networks:
      - observability-net
  
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    hostname: promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/log:/var/log:ro
    # command: -config.file=/etc/promtail/promtail-config.yml
    ports:
      - "9080:9080"
    <<: *resources  # Reutiliza los límites de recursos


    healthcheck:
      # test: ["CMD", "curl", "-f", "http://localhost:9080/ready"]
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9080/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - observability-net


  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    hostname: alertmanager
    restart: unless-stopped
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
    ports:
      - "127.0.0.1:9093:9093"
    networks:
      - observability-net
    <<: *resources  # Reutiliza los límites de recursos
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    hostname: cadvisor
    restart: unless-stopped
    # getent group docker | cut -d: -f3
    # user: "0:981"
    command: ["--port=8000"]
    ## user: root
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
        #devices:
        #- /dev/kmsg:/dev/kmsg
    ports:
      - "127.0.0.1:8000:8000"
    <<: *resources  # Reutiliza los límites de recursos
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s        
    networks:
      - observability-net

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    hostname: node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - observability-net
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    <<: *resources  # Reutiliza los límites de recursos
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s        
        
  consul:
    image: hashicorp/consul:latest
    container_name: consul
    hostname: consul
    restart: unless-stopped
    network_mode: bridge
    command: "agent -server -bootstrap-expect=1  -node=master-host  -client=0.0.0.0 -bind=0.0.0.0 --advertise= -ui"
    volumes:
      - consul_data:/consul/data
    ports:  # Solo Consul mapea los puertos al host
      - "8500:8500"  # API HTTP
      - "8600:8600/tcp"  # DNS (TCP)
      - "8600:8600/udp"  # DNS (UDP)
      - "8300:8300"  # RPC
      - "8301:8301"  # Serf LAN
      - "8302:8302"  # Serf WAN
    <<: *resources  # Reutiliza los límites de recursos    
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8500/v1/agent/self"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s      

  nginx:
    image: nginx:latest
    container_name: nginx
    hostname: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/templates:/etc/nginx/templates
    ports:
      - "444:443"  
      - "81:80"
    networks:
      - observability-net
    <<: *resources
    depends_on:
      - node-exporter
      - cadvisor
      - alertmanager
      - consul-template


  consul-template:
    image: hashicorp/consul-template
    container_name: consul-template
    hostname: consul-template
    restart: unless-stopped
    environment:
      CONSUL_HTTP_ADDR: "$MASTER_IP:8500"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d  # Carpeta compartida con Nginx
      - ./nginx/templates:/etc/nginx/templates  # Plantillas de Consul Template
    command:
      - "-template"
      - "/etc/nginx/templates/nginx.conf.ctmpl:/etc/nginx/conf.d/default.conf:nginx -s reload"
    depends_on:
      - consul
    <<: *resources  

